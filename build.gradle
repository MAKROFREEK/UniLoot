plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'net.smaa'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    // The PurpurMC repository hosts the Purpur server API
    maven {
        name = "purpur"
        url = "https://repo.purpurmc.org/snapshots"
    }
}

dependencies {
    // The Purpur API for Minecraft 1.21.8.
    // 'compileOnly' means this dependency is needed for compiling,
    // but it will be provided by the server at runtime.
    compileOnly("org.purpurmc.purpur:purpur-api:1.21.8-R0.1-SNAPSHOT")

    // Explicitly add the Adventure API. This is good practice as it ensures
    // your IDE and the compiler can find all necessary modern API components
    // that Purpur uses, like sound Keys.
    compileOnly("net.kyori:adventure-api:4.17.0")
}

tasks {
    runServer {
        // Configure the Minecraft version for our local test server task.
        minecraftVersion("1.21.8")
    }
}

// Set the Java version for the project to 21
def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

// This task processes the plugin.yml file, replacing variables like ${version}
// with the actual values from this build script.
processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

